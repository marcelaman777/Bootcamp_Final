{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNyUR6UyFtR9drxLnGTE5aI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**EVALUACIÓN MÓDULO 2**\n","\n","##**LIBROS Y BYTES: TIENDA ONLINE DE LIBROS**"],"metadata":{"id":"Vg-vY00a6ftj"}},{"cell_type":"markdown","source":["Al final de la actividad se implementará el siguiente menú:\n","\n","********** SISTEMA DE COMPRAS *********\n","1. Mostrar libros disponibles\n","2. Filtrar libros por rango de precios\n","3. Comprar libro\n","4. Finalizar compra y mostrar factura\n","***************************************\n","\n","<br>\n","\n","Cada vez que se menciona que el usuario vuelve al menú principal, se refiere al menú mostrado arriba.\n","\n","Este menú permite añadir libros al carrito de compras seleccionando la opción 3 (\"Comprar libro\").\n","Los libros se acumulan en una lista.\n","La única forma de salir del menú es eligiendo la opción 4 (\"Finalizar compra y mostrar factura\").\n","\n","<br>\n","\n","**❗ Importante:**\n","- Para esta actividad, **libros** se utiliza como variable global, ya que las funciones no la reciben como parámetro (por descripción de la actividad).\n","- De manera similar, **descuentos_por_autor** también se trata como variable global.\n","- Se utiliza una variable local llamada **carrito** (de compras) para almacenar los detalles de cada libro comprado: título, cantidad, descuento aplicado y los precios de venta antes y después de los descuentos.\n","- La función de compra ha sido modificada para devolver los datos de la compra en formato de diccionario, los cuales se añadirán al carrito."],"metadata":{"id":"r-D7UvgH4hN-"}},{"cell_type":"markdown","source":["**1. Definir variables básicas y tipos de datos:**   \n","- Crea una lista que contenga al menos cinco libros, donde cada libro sea un\n","diccionario con los atributos titulo (cadena de caracteres), autor (cadena de\n","caracteres), precio (decimal) y cantidad en stock."],"metadata":{"id":"vWIcEWf57AkL"}},{"cell_type":"code","source":["libros = [\n","    {'titulo':'Python Para Todos', 'autor':'Charles Severance', 'precio':17800.0, 'cantidad en stock':10},\n","    {'titulo':'Python Crash Course', 'autor':'Eric Matthes', 'precio':49300.0, 'cantidad en stock':5},\n","    {'titulo':'Modern Python Cookbook', 'autor':'Steven F. Lott', 'precio':48500.0, 'cantidad en stock':3},\n","    {'titulo':'Ultimate Python', 'autor':'Nicolas Schurmann', 'precio':32800.0, 'cantidad en stock':7},\n","    {'titulo':'Python Data Cleaning Cookbook', 'autor': 'Michael Walker', 'precio':55100.0, 'cantidad en stock':10},\n","    {'titulo':\"Aprende Python desde cero hasta avanzado\", 'autor':'Xavier Reyes Ochoa', 'precio':19500.0, 'cantidad en stock':2},\n","    {'titulo':'Python paso a paso', 'autor': 'Ángel Pablo Hinojosa', 'precio':8500.0, 'cantidad en stock':20}\n","]\n","\n","libros.sort(key=lambda libro: libro['titulo']) # ordenar alfabéticamente por título"],"metadata":{"id":"BSLWET329C7D"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**2. Control de flujo:**\n","- Implementa una función llamada mostrar_libros_disponibles() que recorra la lista de libros y muestre en pantalla los libros que tienen más de una unidad en stock usando una sentencia for y una condición if."],"metadata":{"id":"ISoR5m7L7JBF"}},{"cell_type":"code","source":["def mostrar_libros_disponibles():\n","    '''\n","        Muestra en pantalla los libros que tienen al menos una unidad en stock.\n","        Si no los hay, muestra un mensaje indicando que no hay libros disponibles.\n","    '''\n","\n","    print('******************** Libros disponibles ********************')\n","\n","    i = 0 # variable que indica que hay libros disponibles cuando i > 0\n","\n","    for libro in libros:\n","         if libro['cantidad en stock'] > 0:\n","            i += 1\n","            print(f\"{i}. {libro['titulo']:<45} {libro['cantidad en stock']:>3} uds.\")\n","\n","    if i == 0:\n","        print('- No hay libros disponibles')\n","\n","\n","#mostrar_libros_disponibles()"],"metadata":{"id":"LtA24IzZC9YN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**3. Condiciones y operadores:**\n","- Solicita al usuario que ingrese un rango de precios (mínimo y máximo) y utiliza una sentencia if elif else para filtrar los libros en el rango ingresado y mostrarlos en pantalla."],"metadata":{"id":"g4JAbT3-7MEr"}},{"cell_type":"code","source":["def filtrar_libros_por_rango_de_precios():\n","    '''\n","        Muestra en pantalla los libros cuyos precios están dentro del rango\n","        de valores mínimo y máximo ingresados por el usuario.\n","        Si no hay libros en el rango de precios, muestra un mensaje indicando\n","        que no hay libros disponibles.\n","        La función retorna al menú principal en caso que el usuario desee cancelar\n","        el ingreso de precios al momento de determinar el rango.\n","    '''\n","\n","    def obtiene_precios_validos_para_el_rango(tipo_precio='minimo', valor_minimo=0):\n","        '''\n","            Función auxiliar para obtener precios mínimos y máximos válidos para el rango.\n","            rango = [valor_minimo, valor_maximo] donde se cumple:\n","                - valor_maximo >= valor_minimo > 0, o\n","                - valor_maximo > valor_minimo == 0\n","            Parámetros:\n","            - tipo_precio: 'minimo' o 'maximo'\n","            - valor_minimo: mímimo valor que puede tener el precio mínimo o máximo, tal que:\n","                - Si tipo_precio == 'minimo', valor_minimo es un número no negativo.\n","                - Si tipo_precio == 'maximo', valor_minimo corresponde al precio de inicio del rango,\n","                  cumpliéndose además que el precio máximo no puede ser menor al precio mínimo o igual a cero.\n","            Retorna:\n","            - None, si se cancela la operación y se vuelve al menú principal, o\n","            - Un precio válido, en caso contrario.\n","        '''\n","\n","        while True:\n","\n","            precio = input(f'Ingrese precio {tipo_precio} o digite S/s para volver al menu principal >>> ')\n","            precio = precio.strip() # eliminar espacios en blanco al inicio y al final\n","            if precio.lower() == 's':\n","                return None\n","\n","            try:\n","                precio = float(precio)\n","\n","                if tipo_precio == 'minimo' and precio < 0:\n","                    print(f'El precio mínimo debe ser mayor o igual que 0.0')\n","\n","                elif tipo_precio == 'maximo' and (precio <= valor_minimo and valor_minimo==0):\n","                    print(f'El precio máximo debe ser mayor que 0.0')\n","\n","                elif tipo_precio == 'maximo' and (precio < valor_minimo and valor_minimo > 0):\n","                    print(f'El precio máximo debe ser mayor o igual que {float(valor_minimo)}')\n","\n","                else: # precio es válido\n","                    break\n","\n","            except ValueError:\n","                print('Precio mal digitado. Intente de nuevo.')\n","\n","        return precio\n","\n","\n","    precio_min = obtiene_precios_validos_para_el_rango(tipo_precio='minimo', valor_minimo=0)\n","    if precio_min == None: # vuelve al menú principal\n","        return None\n","\n","    precio_max = obtiene_precios_validos_para_el_rango(tipo_precio='maximo', valor_minimo=precio_min)\n","    if precio_max == None: # vuelve al menú principal\n","        return None\n","\n","    print(f'\\n********** Libros en el rango de ${precio_min} a ${precio_max} **********')\n","\n","    i = 0 # variable que indica que hay libros disponibles cuando i > 0\n","\n","    # obtener lista de libros dentro del rango elegido\n","    for libro in libros:\n","         if precio_min <= libro['precio'] <= precio_max:\n","            i += 1\n","            print(f\"{i}. {libro['titulo']:<45} $ {libro['precio']:>7}\")\n","\n","    if i == 0:\n","        print('- Sin libros en el rango de precios')\n","\n","\n","#filtrar_libros_por_rango_de_precios()"],"metadata":{"id":"05YfbA6-D7q4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**4. Función personalizada para simular una compra:**\n","- Crea una función comprar_libros(titulo}, cantidad) que reciba como parámetros el titulo del libro y la cantidad a comprar. La función debe:  \n","    - Verificar si el libro está en el inventario y si la cantidad deseada está\n","disponible.\n","    - Si la compra es válida, restar la cantidad comprada al stock y mostrar el\n","monto total de la compra.\n","    - Si la cantidad solicitada es mayor al stock disponible, mostrar un mensaje\n","de error."],"metadata":{"id":"d_88l0R27PtW"}},{"cell_type":"code","source":["def comprar_libro(titulo:str, cantidad:int):\n","    '''\n","        Efectúa la compra de un único libro.\n","        Si la compra es válida (libro existe y hay stock suficiente):\n","            - Resta la cantidad comprada del stock.\n","            - Muestra el monto total de la compra.\n","        Si la cantidad solicitada excede el stock disponible o el libro no está en el inventario:\n","            - Muestra un mensaje de error.\n","            - Retorna al menú principal.\n","        Parámetros:\n","        - titulo: Título del libro a comprar.\n","        - cantidad: Cantidad de libros a comprar.\n","        Retorna:\n","        - None si libro no se vende en la librería o no hay stock suficiente, o\n","        - En caso de concretar la venta, retorna un diccionario con los atributos:\n","            - cantidad\n","            - titulo\n","            - total_sin_descuento\n","            - descuento\n","            - total_con_descuento\n","    '''\n","\n","    # buscar el título en la lista de libros\n","    # posicion es el índice de libros donde se encuentra el título buscado\n","    posicion = -1\n","    for indice, libro in enumerate(libros):\n","        if libro['titulo'].lower() == titulo.lower(): # libro encontrado\n","            posicion = indice\n","            break\n","\n","    if posicion == -1: # si el libro no se encontró, volver al menú principal\n","        print(f'\"{titulo}\" no se vende en la librería')\n","        return None\n","\n","    #  el libro se encontró\n","    libro = libros[posicion] # importante: libro es un alias para libros[posición en la que se encuentra el libro]\n","\n","    if libro['cantidad en stock'] < cantidad: # si no hay stock sufciente, volver al menú principal\n","        print(f'Cantidad solicitada excede stock de {libro[\"cantidad en stock\"]} unidad(es) disponible(s)')\n","        return None\n","\n","    # hay stock suficiente\n","    libro['cantidad en stock'] -= cantidad # restar la cantidad comprada\n","    total = cantidad * libro['precio'] # calcular el precio sin descuento\n","\n","    item = {\n","        'cantidad': cantidad,\n","        'titulo'  : libro['titulo'],\n","        'total'   : total\n","    }\n","    print(f\"Agregado: {item['cantidad']} x {item['titulo']} - Total: $ {item['total']}\")\n","\n","    return item\n","\n","\n","#_ = comprar_libro(titulo='Python PARA todos', cantidad=5)"],"metadata":{"id":"uBvO0r7ddEGD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**6. Estructura de datos, gestión de descuentos:**\n","- Usa un diccionario para almacenar descuentos especiales por autor. Por ejemplo, aplica un 10% de descuento en libro de un autor especifico.\n","- En la función comprar_libro, certifica si el autor tiene descuento y aplícalo al monto total si corresponde."],"metadata":{"id":"VFC9DZDq7UCf"}},{"cell_type":"code","source":["descuentos_por_autor = {\n","    'Charles Severance':  5,\n","    'Nicolas Schurmann':  5,\n","    'Michael Walker'   : 15\n","}"],"metadata":{"id":"eNwlU-qUI89W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def comprar_libro(titulo:str, cantidad:int):\n","    '''\n","        Efectúa la compra de un único libro.\n","        Si la compra es válida (libro existe y hay stock suficiente):\n","            - Resta la cantidad comprada del stock.\n","            - Muestra el monto total de la compra.\n","            - Aplica los descuentos pertinentes.\n","        Si la cantidad solicitada excede el stock disponible o el libro no está en el inventario:\n","            - Muestra un mensaje de error.\n","            - Retorna al menú principal.\n","        Parámetros:\n","        - titulo: Título del libro a comprar (en minúsculas).\n","        - cantidad: Cantidad de libros a comprar.\n","        Retorna:\n","        - None si libro no se vende en la librería o no hay stock suficiente, o\n","        - En caso de concretar la venta, retorna un diccionario con los atributos:\n","            - cantidad\n","            - titulo\n","            - total_sin_descuento\n","            - descuento\n","            - total_con_descuento\n","    '''\n","\n","    # buscar el título en la lista de libros\n","    # posicion es el índice de libros donde se encuentra el título buscado\n","    posicion = -1\n","    for indice, libro in enumerate(libros):\n","        if libro['titulo'].lower() == titulo: # libro encontrado\n","            posicion = indice\n","            break\n","\n","    if posicion == -1: # si el libro, no se encontró volver al menú principal\n","        print(f'\"{titulo}\" no se vende en la librería')\n","        return None\n","\n","    #  el libro se encontró\n","    libro = libros[posicion] # importante: libro es un alias para libros[posición en la que se encuentra el libro]\n","\n","    if libro['cantidad en stock'] < cantidad: # si no hay stock sufciente, volver al menú principal\n","        print(f'Cantidad solicitada excede stock de {libro[\"cantidad en stock\"]} unidad(es) disponible(s)')\n","        return None\n","\n","    # hay stock suficiente\n","    libro['cantidad en stock'] -= cantidad # restar la cantidad comprada\n","    total_sin_descuento = cantidad * libro['precio'] # calcular el precio sin descuento\n","\n","    # revisar si hay descuento aplicable por autor\n","    if libro['autor'] in descuentos_por_autor: # sí, hay descuento\n","        descuento_pct = descuentos_por_autor[libro['autor']]\n","        descuento = total_sin_descuento * descuento_pct / 100\n","        total_con_descuento = total_sin_descuento - round(descuento) # se considera moneda CPL $\n","        #total_con_descuento = total_sin_descuento - round(descuento, 2) # así sería si fueran US $\n","    else: # no hay descuento\n","        descuento_pct = 0.\n","        descuento = 0.\n","        total_con_descuento = total_sin_descuento\n","\n","    if descuento_pct > 0:\n","        print(f'Descuento aplicado: {descuento_pct:.1f} %')\n","\n","    item = {\n","        'cantidad'           :cantidad,\n","        'titulo'             :libro['titulo'],\n","        'total_sin_descuento':total_sin_descuento,\n","        'descuento'          :descuento,\n","        'total_con_descuento':total_con_descuento\n","    }\n","    print(f\"Agregado: {item['cantidad']} x {item['titulo']} - Valor: $ {item['total_sin_descuento']} - Descuento: $ {item['descuento']} - Subtotal: $ {item['total_con_descuento']}\")\n","\n","    return item\n","\n","\n","#_ = comprar_libro(titulo='Python Para Todos'.lower(), cantidad=3)"],"metadata":{"id":"cuqUz0iGP4jZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**5. Uso de bucle while para iterar hasta que el usuario decida salir:**\n","- Implementa un bucle while que permita al usuario realizar múltiples compras hasta que ingrese una opción de salida."],"metadata":{"id":"jOd_fsGF7R96"}},{"cell_type":"code","source":["def agregar_libros_a_carrito(carrito:list):\n","    '''\n","        Agrega libros al carrito de compras mientras no se retorne al menú principal.\n","        Parámetro:\n","        - carrito: lista de ítems en el carrito de compras. Cada ítem es un diccionario con los atributos:\n","            - cantidad\n","            - titulo\n","            - total_sin_descuento\n","            - descuento\n","            - total_con_descuento\n","    '''\n","\n","    def obtener_titulo_valido():\n","        '''\n","            Función auxiliar para limpiar el título del libro, eliminando los espacios en blanco y convirtiéndolo a minúsculas.\n","            Retorna:\n","            - None, si se cancela la operación y se vuelve al menú principal, o\n","            - Un título válido y limpio (en minúsculas), en caso contrario\n","        '''\n","\n","        while True:\n","            titulo = input('Ingrese título del libro o digite S/s para volver al menú principal >>> ')\n","            titulo = titulo.strip().lower() # eliminar espacios en blanco al inicio y al final y llevar a minúsculas\n","\n","            if titulo == 's': # regresar al menú principal\n","                return None\n","\n","            if len(titulo) == 0:\n","                print('Título mal digitado. Intente de nuevo.')\n","            else:\n","                # eliminar los espacios excesivos entre palabras\n","                titulo = \" \".join(titulo.split())\n","                return titulo\n","\n","\n","    def obtener_cantidad_valida():\n","        '''\n","            Función auxiliar para obtener una cantidad válida.\n","            Retorna:\n","            - None, si se cancela la operación y se vuelve al menú principal, o\n","            - Una cantidad válida (número entero positivo), en caso contrario\n","        '''\n","        while True:\n","\n","            cantidad = input('Ingrese cantidad o digite S/s para volver al menú principal >>> ')\n","            cantidad = cantidad.strip() # eliminar espacios en blanco al inicio y al final\n","            if cantidad.lower() == 's': # vuelve al menú principañ\n","                return None\n","\n","            try:\n","                cantidad = int(cantidad)\n","                if cantidad <= 0:\n","                    print('Cantidad debe ser mayor a 0')\n","                else: # cantidad es un entero positivo\n","                    break\n","\n","            except ValueError:\n","                print('Cantidad mal digitada. Intente de nuevo.')\n","\n","        return cantidad\n","\n","\n","    # el ciclo while termina cuando el título o la cantidad son iguales a None\n","    while True:\n","\n","        # obtener un título válido o volver al menú principal\n","        titulo = obtener_titulo_valido()\n","        if titulo == None: # vuelve al menú principal\n","            return None\n","\n","        # obtener una cantidad válida o volver al menú principal\n","        cantidad = obtener_cantidad_valida()\n","        if cantidad == None: # vuelve al menú principal\n","            return None\n","\n","        # efectuar compra con título y cantidad válidos\n","        compra = comprar_libro(titulo=titulo, cantidad=cantidad)\n","\n","        # libro existe y la cantidad solicitada es menor o igual al stock disponible\n","        if compra != None:\n","            carrito.append(compra) # agrega compra al carrito"],"metadata":{"id":"xfwS0sJCxXtZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**7. Simulación de una factura:**  \n","- Al finalizar la compra, muestra un resumen con el total de libros comprados, el monto total pagado y el ahorro por descuentos."],"metadata":{"id":"RAqU7O-e0ZEs"}},{"cell_type":"code","source":["def facturar(carrito:list):\n","    '''\n","        Muestra un resumen de la factura.\n","        Parámetros:\n","        - carrito: lista de ítems en el carrito de compras. Cada ítem es un diccionario con los atributos:\n","            - cantidad\n","            - titulo\n","            - total_sin_descuento\n","            - descuento\n","            - total_con_descuento\n","    '''\n","\n","    if len(carrito) == 0:\n","        print('- Carrito vacío')\n","        return None\n","\n","    print('******************** FACTURA ********************')\n","\n","    total_sin_descuento = 0\n","    descuento = 0\n","    total_con_descuento = 0\n","\n","    for libro in carrito:\n","        print(f\"{libro['cantidad']:>3} x {libro['titulo']:<45} Valor: $ {libro['total_sin_descuento']:>9} Descuento: $ {libro['descuento']:>9} Subtotal: $ {libro['total_con_descuento']:>9}\")\n","        total_sin_descuento += libro['total_sin_descuento']\n","        descuento += libro['descuento']\n","        total_con_descuento += libro['total_con_descuento']\n","\n","    print(f'Total venta    : $ {total_sin_descuento:>9}')\n","    print(f'Total descuento: $ {descuento:>9}')\n","    print(f'Total a pagar  : $ {total_con_descuento:>9}')"],"metadata":{"id":"Z4GW07tqLtW_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**MENU**"],"metadata":{"id":"LjZSf5NvPeVw"}},{"cell_type":"code","source":["libros = [\n","    {'titulo':'Python Para Todos', 'autor':'Charles Severance', 'precio':17800.0, 'cantidad en stock':10},\n","    {'titulo':'Python Crash Course', 'autor':'Eric Matthes', 'precio':49300.0, 'cantidad en stock':5},\n","    {'titulo':'Modern Python Cookbook', 'autor':'Steven F. Lott', 'precio':48500.0, 'cantidad en stock':3},\n","    {'titulo':'Ultimate Python', 'autor':'Nicolas Schurmann', 'precio':32800.0, 'cantidad en stock':7},\n","    {'titulo':'Python Data Cleaning Cookbook', 'autor': 'Michael Walker', 'precio':55100.0, 'cantidad en stock':10},\n","    {'titulo':\"Aprende Python desde cero hasta avanzado\", 'autor':'Xavier Reyes Ochoa', 'precio':19500.0, 'cantidad en stock':2},\n","    {'titulo':'Python paso a paso', 'autor': 'Ángel Pablo Hinojosa', 'precio':8500.0, 'cantidad en stock':20}\n","]"],"metadata":{"id":"8PbWuj_aTnWX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["descuentos_por_autor = {\n","    'Charles Severance':  5,\n","    'Nicolas Schurmann':  5,\n","    'Michael Walker'   : 15\n","}"],"metadata":{"id":"e8B70Eh1ToM_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def menu():\n","    '''\n","        Menú principal del programa.\n","        Una vez iniciado, se ejecutará hasta que el usuario facture la compra\n","        Parámetros:\n","        - libros: lista de libros\n","        - descuentos_por_autor: diccionario de descuentos por autor\n","    '''\n","\n","    print('Bienvenido a librería \"Libros & Bytes\"\\n')\n","\n","    carrito = [] # carro de compras\n","\n","    while True:\n","        print(f'\\n********** SISTEMA DE COMPRAS *********')\n","        print('1. Mostrar libros disponibles')\n","        print('2. Filtrar libros por rango de precios')\n","        print('3. Comprar libro')\n","        print('4. Finalizar compra y mostrar factura')\n","        print(f'***************************************\\n')\n","\n","\n","        opcion = input('Seleccione una opción >>> ')\n","        opcion = opcion.strip() # eliminar espacios en blanco al inicio y al final\n","\n","        if opcion == '1':\n","            print()\n","            mostrar_libros_disponibles()\n","\n","        elif opcion == '2':\n","            print()\n","            filtrar_libros_por_rango_de_precios()\n","\n","        elif opcion == \"3\":\n","            print()\n","            agregar_libros_a_carrito(carrito)\n","\n","        elif opcion == \"4\":\n","            print()\n","            facturar(carrito)\n","            break\n","\n","        else:\n","            print('Opción no válida. Intente de nuevo.')\n","\n","    print('\\nGracias por su compra.')"],"metadata":{"id":"A8rcNquG9BTm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["menu()"],"metadata":{"id":"MHqFl9J2ME4G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"0jsWLXOrqivQ"},"execution_count":null,"outputs":[]}]}